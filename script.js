const CYCLE_DELAY=800;const CYCLE_CONSONANT={'ㄱ':['ㄱ','ㅋ','ㄲ'],'ㄴ':['ㄴ','ㄹ'],'ㄷ':['ㄷ','ㅌ','ㄸ'],'ㅂ':['ㅂ','ㅍ','ㅃ'],'ㅅ':['ㅅ','ㅎ','ㅆ'],'ㅈ':['ㅈ','ㅊ','ㅉ'],'ㅇ':['ㅇ','ㅁ']};const REVERSE_CYCLE_MAP={};for(const base in CYCLE_CONSONANT){CYCLE_CONSONANT[base].forEach(variant=>{REVERSE_CYCLE_MAP[variant]=base})}const CHO="ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ";const JUNG="ㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣ";const JONG="\0ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ";const COMPOSE_JUNG={'ㅣㆍ':'ㅏ','ㆍㅣ':'ㅓ','ㆍㅡ':'ㅗ','ㅡㆍ':'ㅜ','ㅡㅣ':'ㅢ','ㅏㆍ':'ㅑ','ㅓㆍ':'ㅕ','ㅗㆍ':'ㅛ','ㅜㆍ':'ㅠ','ㅏㅣ':'ㅐ','ㅐㅣ':'ㅒ','ㅓㅣ':'ㅔ','ㅔㅣ':'ㅖ','ㅑㅣ':'ㅒ','ㅕㅣ':'ㅖ','ㅗㅏ':'ㅘ','ㅘㅣ':'ㅙ','ㅗㅣ':'ㅚ','ㅚㆍ':'ㅘ','ㅠㅣ':'ㅝ','ㅜㅓ':'ㅝ','ㅝㅣ':'ㅞ','ㅜㅣ':'ㅟ'};const COMPOSE_JONG={'ㄱㅅ':'ㄳ','ㄴㅈ':'ㄵ','ㄴㅎ':'ㄶ','ㄹㄱ':'ㄺ','ㄹㅁ':'ㄻ','ㄹㅂ':'ㄼ','ㄹㅅ':'ㄽ','ㄹㅌ':'ㄾ','ㄹㅍ':'ㄿ','ㄹㅎ':'ㅀ','ㅂㅅ':'ㅄ'};const DECOMPOSE_JONG={'ㄳ':['ㄱ','ㅅ'],'ㄵ':['ㄴ','ㅈ'],'ㄶ':['ㄴ','ㅎ'],'ㄺ':['ㄹ','ㄱ'],'ㄻ':['ㄹ','ㅁ'],'ㄼ':['ㄹ','ㅂ'],'ㄽ':['ㄹ','ㅅ'],'ㄾ':['ㄹ','ㅌ'],'ㄿ':['ㄹ','ㅍ'],'ㅀ':['ㄹ','ㅎ'],'ㅄ':['ㅂ','ㅅ']};let buffer='';let cho=null;let jung=null;let dotSequenceCount=0;let jong=null;let lastInputTime=0;const outputDiv=document.getElementById('output');function combineHangul(c,j,jo){if(c===null&&j===null&&jo===null)return'';if(c===null&&j===null)return jo||'';if(c===null&&jo===null)return j||'';if(j===null&&jo===null)return c||'';const choIdx=CHO.indexOf(c);const jungIdx=JUNG.indexOf(j);const jongIdx=jo?JONG.indexOf(jo):0;if(choIdx===-1&&jungIdx===-1){return(c||'')+(j||'')+(jo||'')}if(choIdx===-1&&c!==null){return c+(j||'')+(jo||'')}if(jungIdx===-1&&j!==null){return(c||'')+j+(jo||'')}if(choIdx!==-1&&jungIdx!==-1){return String.fromCharCode(44032+(choIdx*21*28)+(jungIdx*28)+jongIdx)}else{return(c||'')+(j||'')+(jo||'')}}function flush(){if(cho!==null||jung!==null||jong!==null||dotSequenceCount>0){if(cho&&(dotSequenceCount===1||dotSequenceCount===2)){buffer+=cho+(dotSequenceCount===1?'ㆍ':'ㆍㆍ')}else if(dotSequenceCount===1){buffer+='ㆍ'}else if(dotSequenceCount===2){buffer+='ㆍㆍ'}else{buffer+=combineHangul(cho,jung,jong)}}cho=jung=jong=null;dotSequenceCount=0}function render(){let inProgress='';if(cho||jung||jong||dotSequenceCount>0){if(cho&&(dotSequenceCount===1||dotSequenceCount===2)){inProgress=cho+(dotSequenceCount===1?'ㆍ':'ㆍㆍ')}else if(dotSequenceCount===1){inProgress='ㆍ'}else if(dotSequenceCount===2){inProgress='ㆍㆍ'}else{inProgress=combineHangul(cho,jung,jong)}}outputDiv.innerHTML=buffer.replace(/\n/g,'<br>')+`<span class="inprogress">${inProgress}</span>`}function inputChar(key){const now=Date.now();const isQuickPress=now-lastInputTime<CYCLE_DELAY;console.log(`--- Input: ${key} ---`);console.log(`Before: cho=${cho}, jung=${jung}, jong=${jong}, dot=${dotSequenceCount}`);if(key.length>1){if(key==='삭제'){if(dotSequenceCount>0){dotSequenceCount=dotSequenceCount===2?1:0;if(dotSequenceCount===0)jung=null}else if(jong)jong=null;else if(jung)jung=null;else if(cho)cho=null;else if(buffer.length>0)buffer=buffer.slice(0,-1);render();lastInputTime=now;return}else if(key==='◁'){flush();if(buffer.length>0)buffer=buffer.slice(0,-1);render();lastInputTime=now;return}else if(key==='초기화'){buffer='';cho=jung=jong=null;dotSequenceCount=0;render();lastInputTime=now;return}else if(key==='공백'){flush();buffer+=' ';lastInputTime=now;render();return}else if(key==='Enter'){flush();buffer+='\n';lastInputTime=now;return}}if(CYCLE_CONSONANT[key]||CHO.includes(key)){const cycleList=CYCLE_CONSONANT[key]||[key];const firstConsonant=cycleList[0];let handled=false;if(jong&&isQuickPress&&REVERSE_CYCLE_MAP[jong]===key){jong=cycleList[(cycleList.indexOf(jong)+1)%cycleList.length];handled=true}else if(jong&&!isQuickPress&&COMPOSE_JONG[jong+firstConsonant]){jong=COMPOSE_JONG[jong+firstConsonant];handled=true}else if(cho&&!jung&&isQuickPress&&REVERSE_CYCLE_MAP[cho]===key){cho=cycleList[(cycleList.indexOf(cho)+1)%cycleList.length];handled=true}else if(cho&&jung&&!jong&&JONG.includes(firstConsonant)){jong=firstConsonant;handled=true}if(!handled){flush();cho=firstConsonant}if(handled&&dotSequenceCount>0){dotSequenceCount=0}}else if(JUNG.includes(key)||['ㅣ','ㆍ','ㅡ'].includes(key)){if(jong){const oldJong=jong;const decomposable=DECOMPOSE_JONG[oldJong];let newCho;if(decomposable){jong=decomposable[0];newCho=decomposable[1]}else{jong=null;newCho=oldJong}flush();cho=newCho;jung=key;dotSequenceCount=key==='ㆍ'?1:0;console.log(`받침 분리 후 새 글자 시작: cho=${cho}, jung=${jung}, dot=${dotSequenceCount}`)}else if(jung||dotSequenceCount>0){let combined=null;if(dotSequenceCount===2){console.log(`dotSequenceCount is 2. key is ${key}.`);if(key==='ㅣ'){jung='ㅕ';dotSequenceCount=0;console.log(`ㆍㆍ + ㅣ -> ㅕ 조합 성공.`)}else if(key==='ㅡ'){jung='ㅛ';dotSequenceCount=0;console.log(`ㆍㆍ + ㅡ -> ㅛ 조합 성공.`)}else{console.log(`ㆍㆍ + other vowel. Flushing ㆍㆍ.`);flush();jung=key;dotSequenceCount=key==='ㆍ'?1:0}}else if(dotSequenceCount===1){if(key==='ㆍ'){jung=null;dotSequenceCount=2;console.log(`두 번째 'ㆍ' 입력. dotSequenceCount=2.`)}else{combined=COMPOSE_JUNG['ㆍ'+key];if(combined){jung=combined;dotSequenceCount=0;console.log(`'ㆍ'와 ${key} 조합 성공: ${combined}`)}else{console.log(`'ㆍ'와 ${key} 조합 실패. 현재 'ㆍ' 확정.`);flush();jung=key;dotSequenceCount=key==='ㆍ'?1:0}}}else{console.log(`일반 중성 조합 시도: jung=${jung}, key=${key}.`);combined=COMPOSE_JUNG[jung+key];if(combined){jung=combined;dotSequenceCount=0;console.log(`일반 중성 ${jung}과 ${key} 조합 성공: ${combined}`)}else{console.log(`일반 중성 ${jung}과 ${key} 조합 실패. 현재 글자 확정.`);flush();jung=key;dotSequenceCount=key==='ㆍ'?1:0}}}else if(cho){console.log(`초성에 첫 모음 입력: ${key}.`);jung=key;dotSequenceCount=key==='ㆍ'?1:0}else{console.log(`단독 모음 입력: ${key}.`);flush();buffer+=key;jung=null;dotSequenceCount=0}}else{console.log(`자음/모음 외 다른 키 입력: ${key}.`);flush();buffer+=key;dotSequenceCount=0}console.log(`After: cho=${cho}, jung=${jung}, jong=${jong}, dot=${dotSequenceCount}`);lastInputTime=now;render()}document.querySelectorAll('.key').forEach(keyEl=>{keyEl.addEventListener('click',()=>{const key=keyEl.getAttribute('data-char');if(key===' '){inputChar('공백')}else if(key&&key.trim()!==''){inputChar(key)}})});render();